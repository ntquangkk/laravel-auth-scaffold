<?php
{{ auto_gen_flag }}

namespace {{ namespace }}\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use {{ namespace }}\Http\Requests\Auth\{{ model }}LoginRequest;
use {{ namespace }}\Http\Requests\Auth\{{ model }}RegisterRequest;
use {{ namespace }}\Http\Requests\Auth\{{ model }}ForgotPasswordRequest;
use {{ namespace }}\Http\Requests\Auth\{{ model }}ResetPasswordRequest;
use {{ namespace }}\Services\Auth\{{ model }}AuthService;

class {{ model }}ApiAuthController extends Controller
{
    protected ${{ modelVar }}AuthService;

    public function __construct({{ model }}AuthService ${{ modelVar }}AuthService)
    {
        $this->{{ modelVar }}AuthService = ${{ modelVar }}AuthService;
    }

    public function register({{ model }}RegisterRequest $request)
    {
        try {
            $user = $this->{{ modelVar }}AuthService->register($request->validated());

            return response()->json([
                'status' => 'success',
                'message' => 'Registration successful',
                'data' => $user,
            ], 201);
        } catch (Exception $e) {
            Log::error('Registration failed: '.$e->getMessage());

            return response()->json([
                'status' => 'error',
                'message' => 'Registration failed',
                'errors' => [$e->getMessage()],
            ], 400);
        }
    }

    public function login({{ model }}LoginRequest $request)
    {
        try {
            $token = $this->{{ modelVar }}AuthService->login($request->validated());
            if (! $token) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Incorrect login information',
                    'errors' => [],
                ], 401);
            }

            return response()->json([
                'status' => 'success',
                'message' => 'Login successful',
                'data' => [
                    'token' => $token,
                    'token_type' => 'Bearer',
                ],
            ]);
        } catch (Exception $e) {
            Log::error('Login failed: '.$e->getMessage());

            return response()->json([
                'status' => 'error',
                'message' => 'Login failed',
                'errors' => [$e->getMessage()],
            ], 500);
        }
    }

    public function logout(Request $request)
    {
        try {
            $this->{{ modelVar }}AuthService->logout($request->user());

            return response()->json([
                'status' => 'success',
                'message' => 'Logout successful',
            ]);
        } catch (Exception $e) {
            Log::error('Logout failed: '.$e->getMessage());

            return response()->json([
                'status' => 'error',
                'message' => 'Logout failed',
                'errors' => [$e->getMessage()],
            ], 500);
        }
    }

    public function forgotPassword({{ model }}ForgotPasswordRequest $request)
    {
        try {
            $this->{{ modelVar }}AuthService->sendPasswordResetLink($request->validated());

            return response()->json([
                'status' => 'success',
                'message' => 'Password reset link sent',
            ]);
        } catch (Exception $e) {
            Log::error('Password reset link failed: '.$e->getMessage());

            return response()->json([
                'status' => 'error',
                'message' => 'Password reset link failed',
                'errors' => [$e->getMessage()],
            ], 400);
        }
    }

    public function resetPassword({{ model }}ResetPasswordRequest $request)
    {
        try {
            $this->{{ modelVar }}AuthService->resetPassword($request->validated());

            return response()->json([
                'status' => 'success',
                'message' => 'Password reset successful',
            ]);
        } catch (Exception $e) {
            Log::error('Password reset failed: '.$e->getMessage());

            return response()->json([
                'status' => 'error',
                'message' => 'Password reset failed',
                'errors' => [$e->getMessage()],
            ], 400);
        }
    }

    public function verifyOtp(Request $request)
    {
        try {
            $this->{{ modelVar }}AuthService->verifyOtp($request->only('email', 'otp'));

            return response()->json([
                'status' => 'success',
                'message' => 'Email verified',
            ]);
        } catch (Exception $e) {
            Log::error('OTP verification failed: '.$e->getMessage());

            return response()->json([
                'status' => 'error',
                'message' => 'OTP verification failed',
                'errors' => [$e->getMessage()],
            ], 400);
        }
    }
}
